/* _sass/_main.scss */

@mixin space($attribute) {
  @for $i from 1 to 6 {
    &-#{$i} {
      #{$attribute}: $i * 10px / 1;
    }
  }
}

@mixin width-px($attribute) {
  @for $i from 1 to 1000 {
    &-#{$i} {
      #{$attribute}: $i * 1px / 1;
    }
  }
}

@mixin height-px($attribute) {
  @for $i from 1 to 1000 {
    &-#{$i} {
      #{$attribute}: $i * 1px / 1;
    }
  }
}

@mixin fontsize-px($attribute) {
  @for $i from 1 to 1000 {
    &-#{$i} {
      #{$attribute}: $i * 1px / 1;
    }
  }
}

.m {
  @include space(margin);
}

.mb {
  @include space(margin-bottom);
}

.mt {
  @include space(margin-top);
}

.mr {
  @include space(margin-right);
}

.ml {
  @include space(margin-left);
}

.p {
  @include space(padding);
}

.pb {
  @include space(padding-bottom);
}

.pt {
  @include space(padding-top);
}

.pr {
  @include space(padding-right);
}

.pl {
  @include space(padding-left);
}

.wpx {
  @include width-px(width);
}

.hpx {
  @include height-px(height);
}

.font-size-px {
  @include fontsize-px(font-size);
}

.spacer {
  flex: 1 1 auto;
}

// Button

.btn-block {
  width: 100%;
}

// Text align

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.text-left {
  text-align: left;
}

// Grid

$break-points: (
  xs: 0px,
  sm: 360px,
  md: 768px,
  lg: 1000px
);

$columns: 12;

@mixin breakpoint($breakPoint) {
  @media screen and (min-width: #{$breakPoint}) {
    @content;
  }
}

:focus {
  outline: none;
}

.button {
  width: 100%;
}

.bold {
  font-weight: bold;
}

.w-100 {
  width: 100%;
}

.h-100 {
  height: 100%;
}

.m-auto {
  margin: auto;
}

.p-relative {
  position: relative;
}

.p-absolute {
  position: absolute;
}

.w-50 {
  width: 50%;
}

.w-90 {
  width: 90%;
}

.max-height-500 {
  max-height: 500px;
}

.border {
  border: 1px solid black;
}

.decorationText {
  text-decoration: underline;
}

.shadow-image {
  box-shadow: 0px 10px 10px #000000;
}

/* Ensure html and body fill the viewport height */
html, body {
  height: 100%;
  margin: 0;
}

/* Set up the body as a flex container */
body {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  font-family: 'Roboto', sans-serif;
  overflow-x: hidden;
}

/* Use Roboto or Lobster for headings */
h1, h2, h3, h4, h5, h6 {
  font-family: 'Roboto', sans-serif; /* Or you can use 'Lobster', cursive if desired */
  font-weight: 800 !important;
  line-height: 1;
}

/* Content should take up all available space */
.container.content {
  flex: 1;
}

/* Footer styles */
footer {
  background-color: #f8f9fa;
  text-align: center;
  width: 100%;
}

.home-outer-card {
  height: 250px;
  max-height: 500px;
}

.home-inner-card {
  padding-top: 25px;
  padding-bottom: 25px;
  height: 200px;
  max-height: 200px;

  p {
    text-align: justify;
  }

  @media (max-width: 768px) {
    img {
      display: none;
    }
  }
}

.space-line {
  border-bottom: 1px solid #888888;
}

.about-card {
  background-color: #f0f8ff;
}

.ml-unset {
  margin-left: unset;
}

.mr-unset {
  margin-right: unset;
}

.max-width-100 {
  max-width: 100%;
}

/* Initially hide elements by moving them off-screen and setting opacity to 0 */
.animate-left, .animate-right {
  opacity: 0;
  transform: translateX(0);
  transition: all 1s ease-in-out;
}

.animate-left {
  transform: translateX(-100%);
}

.animate-right {
  transform: translateX(100%);
}

/* When in view, reset the transform and set opacity to 1 */
.in-view {
  opacity: 1;
  transform: translateX(0);
}

a {
  text-decoration: none;
}

.copyright-footer {
  background-color: rgba(0, 0, 0, 0.2);
}
